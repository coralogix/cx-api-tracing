syntax = "proto3";

import "com/coralogix/tracing/v1/query_backend.proto";
import "google/protobuf/wrappers.proto";
import "com/coralogix/tracing/v1/audit_log.proto";
import "com/coralogix/tracing/v1/span.proto";
import "com/coralogix/tracing/v1/trace.proto";
import "com/coralogix/tracing/v1/trace_query.proto";
import "com/coralogix/tracing/v1/trace_graph.proto";
import "com/coralogix/tracing/v1/spans_service.proto";

package com.coralogix.tracing.v1;

message GetFullTracingDataRequest {
    TracingQuery query = 1;
}

message GetFullTracingDataResponse {
    GetTracesResponse traces_data = 1;
    GetSpanCountResponse span_count_data = 2;
    GetSpanFiltersResponse span_filter_data = 3;
    repeated GetSpanGraphResponse span_graph_data = 4;
}

message GetTraceRequest {
    google.protobuf.StringValue trace_id = 1; // required
    google.protobuf.Int32Value team_id = 2;
    TraceQueryTimeRange time_range = 3;
    QueryBackend query_backend = 4;
    google.protobuf.Int32Value reference_fetch_limit = 5;
    google.protobuf.Int32Value max_multi_trace_width = 6;
}

message GetTraceResponse {
    google.protobuf.StringValue trace_id = 1;
    repeated Span spans = 2;
    google.protobuf.Int32Value total_number_of_spans = 3;
}

message GetTracesRequest {
    TracingQuery query = 1;
}

message GetTracesResponse {
    repeated Trace traces = 1;
}

message GetTraceCountRequest {
    TracingQuery query = 1;
}

message GetTraceCountResponse {
    google.protobuf.Int64Value count = 1;
}

message GetCachedTraceQueryRequest {
    google.protobuf.StringValue query_id = 1;
}

message GetCachedTraceQueryResponse {
    TracingQueryDefinition query = 1 [deprecated=true];
    google.protobuf.Int32Value saved_view_id = 2 [deprecated=true];
    TracingRequest tracing_request = 3;
}

message SetCachedTraceQueryRequest {
    google.protobuf.StringValue query_id = 1;
    TracingQuery query = 2 [deprecated=true];
    TracingRequest tracing_request = 3;
}

message SetCachedTraceQueryResponse {}

message GetTraceFiltersRequest {
    TracingQuery query = 1;
}

message GetTraceLatencyPercentileRequest {
    TracingQuery query = 1;
}

message GetTraceFiltersResponse {
    repeated MetadataFilterField metadata_filters = 1;
    repeated TagFilterField tag_filters = 2;
    TraceQueryLatency latency_range = 3;
    repeated FilterFieldValue teams = 4;
    LatencyPercentileType latency_percentile = 5;
    repeated TagFilterField process_tag_filters = 6;

}

message GetTraceLatencyPercentileResponse {
    TraceQueryLatencyPercentile latency_percentile = 1;
}

message GetTraceGraphRequest {
    TracingQuery query = 1;
    google.protobuf.Int32Value graph_id = 2;
}

message GetTraceGraphResponse {
    TracingGraphResult graph = 1;
    google.protobuf.Int64Value graph_id = 2;
}

message GetTraceTagsRequest {
    TraceQueryTimeRange time_range = 1;
    repeated google.protobuf.UInt32Value teams = 2;
}

message GetTraceTagsResponse {
    repeated google.protobuf.StringValue tags = 3;
}

message GetTraceProcessTagsRequest {
    TraceQueryTimeRange time_range = 1;
    repeated google.protobuf.UInt32Value teams = 2;
}

message GetTraceProcessTagsResponse {
    repeated google.protobuf.StringValue tags = 3;
}

message GetReferencedTracesRequest {
    message ReferenceSource {
        Span span = 1;
    }
    repeated ReferenceSource sources = 1;
}

message GetReferencedTracesResponse {
    message TraceReference {
        message Destination {
            GetTraceResponse trace = 1;
            google.protobuf.StringValue destination_span_id = 2;
        }
        Span source_span = 1;
        Destination destination = 3;
    }
    repeated TraceReference references = 1;
}

service TracingService {
    rpc GetTrace(GetTraceRequest) returns (GetTraceResponse) {
        option (audit_log_description).description = "get trace";
    }

    rpc GetTraces(GetTracesRequest) returns (GetTracesResponse) {
        option (audit_log_description).description = "get traces";
    }

    rpc GetTraceCount(GetTraceCountRequest) returns (GetTraceCountResponse) {
        option (audit_log_description).description = "get trace count";
    }

    rpc GetCachedTraceQuery(GetCachedTraceQueryRequest) returns (GetCachedTraceQueryResponse) {
        option (audit_log_description).description = "get cached trace query";
    }

    rpc GetTraceFilters(GetTraceFiltersRequest) returns (GetTraceFiltersResponse) {
        option (audit_log_description).description = "get trace filters";
    }

    rpc GetTraceGraph(GetTraceGraphRequest) returns (GetTraceGraphResponse) {
        option (audit_log_description).description = "get trace graph";
    }

    rpc GetTraceTags(GetTraceTagsRequest) returns (GetTraceTagsResponse) {
        option (audit_log_description).description = "get trace tags";
    }

    rpc GetTraceProcessTags(GetTraceProcessTagsRequest) returns (GetTraceProcessTagsResponse) {
        option (audit_log_description).description = "get trace process tags";
    }

    rpc GetTraceLatencyPercentile(GetTraceLatencyPercentileRequest) returns (GetTraceLatencyPercentileResponse) {
        option (audit_log_description).description = "get trace latency";
    }

    rpc SetCachedTraceQuery(SetCachedTraceQueryRequest) returns (SetCachedTraceQueryResponse) {
        option (audit_log_description).description = "set cached trace query";
    }

    rpc GetFullTracingData(GetFullTracingDataRequest) returns (GetFullTracingDataResponse) {
        option (audit_log_description).description = "get full tracing data";
    }

    rpc GetReferencedTraces(GetReferencedTracesRequest) returns (GetReferencedTracesResponse) {
        option (audit_log_description).description = "get referenced traces";
    }
}
