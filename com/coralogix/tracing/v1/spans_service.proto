syntax = "proto3";
import "google/protobuf/wrappers.proto";
import "com/coralogix/tracing/v1/audit_log.proto";
import "com/coralogix/tracing/v1/span.proto";
import "com/coralogix/tracing/v1/span_query.proto";
import "com/coralogix/tracing/v1/trace_query.proto";
import "com/coralogix/tracing/v1/span_graph.proto";

package com.coralogix.tracing.v1;

message GetSpanRequest {
  google.protobuf.StringValue span_id = 1;
  google.protobuf.Int32Value team_id = 2;
  SpanQueryTimeRange time_range = 3;
}

message GetSpanResponse {
  Span span = 1;
}

message GetSpansRequest {
  SpanQuery query = 1;
}

message GetSpansResponse {
  repeated Span spans = 1;
}

message GetSpanCountRequest {
  SpanQuery query = 1;
}

message GetSpanCountResponse {
  google.protobuf.Int64Value count = 1;
}

message GetSpanFiltersRequest {
  SpanQuery query = 1;
}

message GetSpanFiltersResponse {
  repeated MetadataFilterField metadata_filters = 1;
  repeated TagFilterField tag_filters = 2;
  SpanQueryLatency latency_range = 3;
  repeated FilterFieldValue teams = 4;
  LatencyPercentileType latency_percentile = 5;
  repeated TagFilterField process_tag_filters = 6;
}

message GetSpanGraphRequest {
  SpanQuery query = 1;
  google.protobuf.Int32Value graph_id = 2;
}

message GetSpanGraphResponse {
  SpanGraphResult graph = 1;
  google.protobuf.Int64Value graph_id = 2;
}

message GetFullSpanDataRequest {
  SpanQuery query = 1;
}

message GetFullSpanDataResponse {
  GetSpansResponse spans_data = 1;
  GetSpanCountResponse span_count_data = 2;
  GetSpanFiltersResponse span_filter_data = 3;
  repeated GetSpanGraphResponse span_graph_data = 4;
}

message GetCachedSpanQueryRequest {
  google.protobuf.StringValue query_id = 1;
}

message GetCachedSpanQueryResponse {
  SpanQueryDefinition query = 1 [deprecated=true];
  google.protobuf.Int32Value saved_view_id = 2 [deprecated=true];
  SpanRequest tracing_request = 3;
}

message SetCachedSpanQueryRequest {
  google.protobuf.StringValue query_id = 1;
  SpanQuery query = 2 [deprecated=true];
  SpanRequest span_request = 3;
}

message SetCachedSpanQueryResponse {}

service SpanService {
  rpc GetSpan(GetSpanRequest) returns (GetSpanResponse) {
    option (audit_log_description).description = "get span";
  }

  rpc GetSpans(GetSpansRequest) returns (GetSpansResponse) {
    option (audit_log_description).description = "get spans";
  }

  rpc GetSpanCount(GetSpanCountRequest) returns (GetSpanCountResponse) {
    option (audit_log_description).description = "get span count";
  }

  rpc GetSpanFilters(GetSpanFiltersRequest) returns (GetSpanFiltersResponse) {
    option (audit_log_description).description = "get span filters";
  }
  rpc GetSpanGraph(GetSpanGraphRequest) returns (GetSpanGraphResponse) {
    option (audit_log_description).description = "get span graph";
  }
  rpc GetFullSpanData(GetFullSpanDataRequest) returns (GetFullSpanDataResponse) {
    option (audit_log_description).description = "get full span data";
  }
  rpc GetCachedSpanQuery(GetCachedSpanQueryRequest) returns (GetCachedSpanQueryResponse) {
    option (audit_log_description).description = "get cached spans query";
  }
  rpc SetCachedSpanQuery(SetCachedSpanQueryRequest) returns (SetCachedSpanQueryResponse) {
    option (audit_log_description).description = "set cached spans query";
  }
}

